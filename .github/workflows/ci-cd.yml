name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: eu-west-3

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Lint check
        run: |
          if [ -f "package.json" ] && grep -q '"lint"' package.json; then
            npm run lint
          else
            echo "No lint script found, skipping"
          fi

      - name: Security scan with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Start services for testing
        run: docker compose up -d

      - name: Wait for services
        run: |
          echo "Waiting for services to be ready..."
          sleep 30

      - name: Run unit tests
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm test
          else
            echo "No test script found, skipping unit tests"
          fi

      - name: Run E2E tests
        run: |
          if [ -f "package.json" ] && grep -q '"test:e2e"' package.json; then
            npm run test:e2e
          else
            echo "No E2E tests found, creating basic health check"
            curl -f http://localhost:3000 || echo "Thread service health check"
            curl -f http://localhost:3002 || echo "Sender service health check"
            curl -f http://localhost:3001/health || echo "API service health check"
          fi

      - name: Stop services
        run: docker compose down

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    outputs:
      image-tag: ${{ steps.vars.outputs.SHORT_SHA }}
    steps:
      - uses: actions/checkout@v4

      - name: Set variables
        id: vars
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repositories if they don't exist
        run: |
          aws ecr describe-repositories --repository-names forum-api || aws ecr create-repository --repository-name forum-api
          aws ecr describe-repositories --repository-names forum-thread || aws ecr create-repository --repository-name forum-thread
          aws ecr describe-repositories --repository-names forum-sender || aws ecr create-repository --repository-name forum-sender

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SHORT_SHA: ${{ steps.vars.outputs.SHORT_SHA }}
        run: |
          # Build and push API
          docker build -t $ECR_REGISTRY/forum-api:$SHORT_SHA ./api
          docker push $ECR_REGISTRY/forum-api:$SHORT_SHA

          # Build and push Thread
          docker build -t $ECR_REGISTRY/forum-thread:$SHORT_SHA ./thread
          docker push $ECR_REGISTRY/forum-thread:$SHORT_SHA

          # Build and push Sender
          docker build -t $ECR_REGISTRY/forum-sender:$SHORT_SHA ./sender
          docker push $ECR_REGISTRY/forum-sender:$SHORT_SHA

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && !inputs.destroy
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="image_tag=${{ needs.build.outputs.image-tag }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}"

      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve \
            -var="image_tag=${{ needs.build.outputs.image-tag }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}"

  destroy:
    runs-on: ubuntu-latest
    if: inputs.destroy
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Destroy
        working-directory: ./terraform
        run: |
          terraform init
          terraform destroy -auto-approve \
            -var="image_tag=dummy" \
            -var="db_password=${{ secrets.DB_PASSWORD }}"
